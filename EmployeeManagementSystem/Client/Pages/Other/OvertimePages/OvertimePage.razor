@if (allState.ShowOvertime)
{
    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header"> <h4 class="float-start"> Overtime Information </h4></div>
                    <div class="card-header">
                        <button class="btn btn-outline-success float-end" @onclick="OvertimeTypeButtonClicked"><i class="bi bi-plus-circle-doted"></i>Overtime Type</button>
                    </div>
                    <div class="card-body">
                        <QuickGrid Items="Overtimes.AsQueryable()">
                            <PropertyColumn Title="Employee Id" Property="e=>e.EmployeeId" />
                            <PropertyColumn Title="Start Date" Property="e=>e.StartDate" />
                            <PropertyColumn Title="End Date" Property="e=>e.EndDate" />
                            <PropertyColumn Title="Number Of Days" Property="e=>e.NumberOfDays" />
                            <PropertyColumn Title="Type" Property="e=>e.OvertimeType.Name" />
                              <TemplateColumn Title="Action">
                                @{
                                    var overtime = (context as Overtime);
                                    <div>
                                        <i class="bi bi-pencil text-info" @onclick="()=>EditButtonClicked(overtime)"></i>
                                        <i class="bi bi-trash text-danger" @onclick="()=>DeleteButtonClicked(overtime)"></i>
                                
                                    </div>

                                }
                            </TemplateColumn>
                        </QuickGrid>
                    </div>
                    <div class="card-footer"></div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    public Overtime Overtime { get; set; } = new();
    public List<Overtime> Overtimes { get; set; } = new();
    public string Title { get; set; } = "Add";

    protected async override Task OnInitializedAsync()
    {
        await GetOvertime();
        allState.Action += StateHasChanged;

    }

    public async Task GetOvertime()
    {
        Overtimes = await overtimeService.GetAll(Constants.OvertimeBaseUrl);
    }

    public void OvertimeTypeButtonClicked()
    {
        allState.OvertimeTypeClicked();
    }
    public async void DeleteButtonClicked(Overtime overtime)
    {
        var confirmModal = Modal.Show<ConfirmationDialog>($"Are you sure you wanna delete {overtime.EmployeeId}?");
        var result = await confirmModal.Result;

        if (result.Cancelled) return;

        var response = await overtimeService.DeleteById(Overtime.Id, Constants.OvertimeBaseUrl);
        if (await DisplayMassage(response.Flag, response.Massage))
        {
            await GetOvertime();
            StateHasChanged();
        }
    }

    private async void AddHealthClicked(Overtime overtime)
    {

        if (Title.Contains("Update"))
        {
            var parameters = new ModalParameters()
                    .Add(nameof(OvertimeDialog.i), overtime.EmployeeId);

            var form = Modal.Show<OvertimeDialog>($"Add Employee Overtime Information", parameters);
            var result = await form.Result;

            if (result.Confirmed)
            {
                var temp = result.Data.ToString().Split(';');
                // await DisplayMassage(false, $"Data:{temp[0]}, MedicalDiagnose:{temp[1]}, MedicalRecommendation: {temp[2]}");
                Overtime.Id = int.Parse(temp[0]);
                Overtime.EmployeeId = int.Parse(temp[3]);
                Overtime.StartDate = DateTime.Parse(temp[1]);
                Overtime.EndDate = DateTime.Parse(temp[2]);
                Overtime.OvertimeTypeId = int.Parse(temp[4]);
                await SaveOvertimeEvent(Overtime, Overtime.EmployeeId);
            }

        }
       


    }
    async Task SaveOvertimeEvent(Overtime item, int employeeId)
    {
        item.EmployeeId = employeeId;
        var (flag, massage) = await overtimeService.Update(item, Constants.OvertimeBaseUrl);
        var response = await DisplayMassage(flag, massage);
        if (response)
        {
            Overtime = new();
        }
    }
    public void EditButtonClicked(Overtime overtime)
    {
        Title = "Update";
        AddHealthClicked(overtime);
    }
    private async Task<bool> DisplayMassage(bool flag, string massage)
    {

        if (flag)
        {
            var parameters = new ModalParameters()
            .Add(nameof(DisplayMessage.Message), massage);
            Modal.Show<DisplayMessage>
                ("Succes", parameters);
            return true;
        }
        else
        {
            var parameters = new ModalParameters()
            .Add(nameof(DisplayMessage.Message), massage);
            Modal.Show<DisplayMessage>
                ("Alert", parameters);
            return false;
        }
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}
