@using BaseLibrary.Entities
@using System.ComponentModel.DataAnnotations


<div class="card border-success">
    <EditForm Model="Overtime" OnValidSubmit="Save">
        <div class="card-body">
            <div class="form-group">
                <label for="form-label">Employee Id:</label>
                <InputNumber @bind-Value="Overtime.EmployeeId" class="form-control" disabled />
            </div>
            <div class="form-group mt-2">
                <label for="form-label">Start Date:</label>
                <InputDate @bind-Value="Overtime.StartDate" class="form-control" />
            </div>
            <div class="form-group mt2">
                <label for="form-label">Number Of Hours :</label>
                <InputNumber @bind-Value="Overtime.NumberOfHours" class="form-control" />
            </div>
            <div class="form-group mt2">
                <label for="form-label">Type :</label>
                <select id="OvertimeTypes" @onchange="OnValueChangeOvertimeTypes">
                    <option value="0">-- Select a Overtime Type --</option>
                    @foreach (var item in OvertimeTypes)
                    {
                        <option value="@item.Id">@item.Name </option>
                    }
                </select>
                <ValidationMessage For="()=>Overtime.OvertimeTypeId" />
            </div>
        </div>
        <div class="card-footer text-center">
            <div class="mx-auto">
                <button type="submit" class="btn btn-primary">Submit</button>
                <button @onclick="Cancel" class="btn btn-secondary">Cancel</button>
            </div>

        </div>

        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public int i { get; set; }
    [Parameter] public Overtime Overtime { get; set; } = new();
    [Parameter] public List<OvertimeType> OvertimeTypes { get; set; } = new();

    [Parameter] public EventCallback<Overtime> HandleSaveOperationEvent { get; set; }


    protected override async void OnInitialized()
    {
        OvertimeTypes = await overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);
        Overtime.StartDate = DateTime.Now;
        Overtime.EmployeeId = i;
        allState.Action += StateHasChanged;
        StateHasChanged();
    }


    async Task Save()
    {

        if (Overtime.OvertimeTypeId > 0)
        {
            var returnData = $"{Overtime.Id};{Overtime.StartDate};{Overtime.NumberOfHours};{Overtime.EmployeeId};{Overtime.OvertimeTypeId};";



            await HandleSaveOperationEvent.InvokeAsync(Overtime);
            await BlazoredModal.CloseAsync(ModalResult.Ok(returnData));

        }
    }

    public void OnValueChangeOvertimeTypes(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int overtimeTypeId))
        {
            if (overtimeTypeId > 0)
            {
                Overtime.OvertimeTypeId = overtimeTypeId;
            }
           
        }

    }


    async Task Cancel() => await BlazoredModal.CancelAsync();


}

