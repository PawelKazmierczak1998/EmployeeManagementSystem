@implements IDisposable

@if (allState.ShowEmployee && allState.ShowMainPage)
{

    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <button class="btn btn-outline-success" @onclick="ShowAddOrUpdateEmployeeButtonClicked">
                            <i class="bi bi-plus-circle-dotted"></i>Add Employee
                        </button>
                    </div>
                    <div class="card-body">
                        <QuickGrid Items="Employees.AsQueryable()">
                            <PropertyColumn Property="e=>e.Id" />
                            <TemplateColumn Title="Photo">
                                @{
                                    var employee = (context as Employee);
                                    <div class="image">
                                        <img src="@employee!.Photo" alt="@employee!.Name" width="150" height="150" />
                                    </div>
                                }
                            </TemplateColumn>
                            <PropertyColumn Property="e=>e.CivilId" />
                            <PropertyColumn Property="e=>e.FileNumber" />
                            <PropertyColumn Property="e=>e.Name" />
                            <PropertyColumn Property="e=>e.TelephoneNumber" />
                            <PropertyColumn Property="e=>e.JobName" />
                            <PropertyColumn Title="Branch" Property="e=>e.Branch!.Name" />
                            <PropertyColumn Title="Town" Property="e=>e.Town!.Name" />
                            <TemplateColumn Title="Action">
                                @{
                                    var employee = (context as Employee);
                                    <div>
                                        <i class="bi bi-pencil text-info" @onclick="()=>EditClicked(employee)"></i>
                                        <i class="bi bi-trash text-danger" @onclick="()=>DeleteClicked(employee)"></i>
                                        <i class="bi bi-file-person text-danger" @onclick="()=>ViewClicked(employee)"></i>
                                        <i class="bi bi-file text-danger" @onclick="()=>RaportClicked(employee)"></i>
                                        <hr />
                                        <i class="bi bi-hospital text-warning" @onclick="()=>AddHealthClicked(employee)"></i>
                                        @if (OvertimeTypes.Count() != 0 || SanctionTypes.Count() != 0 || VacationTypes.Count() != 0)
                                        {
                                            <i class="bi bi-stopwatch text-danger" @onclick="()=>AddOvertimeClicked(employee)"></i>
                                            <i class="bi bi-octagon text-info" @onclick="()=>AddSanctionClicked(employee)"></i>
                                            <i class="bi bi-backpack3 text-success" @onclick="()=>AddVacationClicked(employee)"></i>
                                        }
                                        else
                                        {
                                            <span> Add Types First</span>
                                        }

                                    </div>

                                }
                            </TemplateColumn>

                        </QuickGrid>
                    </div>
                    <div class="card-footer"></div>
                </div>
            </div>
        </div>
    </div>


}


<style>
    /* Stripe effect */
    ::deep tbody tr {
    background-color: rgba(0,0,0,0.04);
    }

    ::deep tbody tr:nth-child(even) {
    background: rgba(255,255,255,0.4);
    }
</style>

<AddOrUpdateEmployeePage @ref="addOrUpdateEmployee"
Employee="Employee"
ShowAddOrUpdateEmployee="ShowAddOrUpdatePage"
NotifyPerentFormCloseClicked="NotifyPerentFormCloseClicked"
Countries="DefaultCountries"
Counties="DefaultCounties"
Towns="DefaultTowns"
GeneralDepartmentents="DefaultGeneralDepartmentents"
Departmentents="DefaultDepartmentents"
Branches="DefaultBranches"
HandleCountrySelectionEvent="HandleCountrySelectionEvent"
HandleCitySelectionEvent="HandleCitySelectionEvent"
HandleGeneralDepartmentSelectionEvent="HandleGeneralDepartmentSelectionEvent"
HandleDepartmententSelectionEvent="HandleDepartmententSelectionEvent"
HandleSaveEmployeeClickedEvent="HandleSaveEmployeeClickedEvent" />

<EmployeeDetailPage @ref="employeeDetailPage" Employee="Employee" HandleDetailsPageClosedClicked="HandleDetailsPageClosedClicked" />
<EmployeeRaportPage @ref="employeeRaportPage" Employee="Employee" EmployeeOvertimes="EmployeeOvertimes" EmployeeSanctions="EmployeeSanctions" SumOfNumbers="SumOfNumbers" HandleDetailsPageClosedClicked="HandleRaportPageClosedClicked" />
@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    AddOrUpdateEmployeePage? addOrUpdateEmployee;
    EmployeeDetailPage? employeeDetailPage;
    EmployeeRaportPage? employeeRaportPage;

    public List<Employee> Employees { get; set; } = [];
    public Employee Employee { get; set; } = new();
    public Doctor Doctor { get; set; } = new();
    public string Title { get; set; } = "Add";
    public List<Country> DefaultCountries { get; set; } = [];
    public List<County> DefaultCounties { get; set; } = [];
    public List<Town> DefaultTowns { get; set; } = [];

    public List<GeneralDepartment> DefaultGeneralDepartmentents { get; set; } = [];
    public List<Department> DefaultDepartmentents { get; set; } = [];
    public List<Branch> DefaultBranches { get; set; } = [];

    public List<Department> SelectedDepartments { get; set; } = [];
    public List<Branch> SelectedBranches { get; set; } = [];
    public List<County> SelectedCounties { get; set; } = [];
    public List<Town> SelectedTowns { get; set; } = [];

    public List<OvertimeType> OvertimeTypes { get; set; } = [];
    public List<SanctionType> SanctionTypes { get; set; } = [];
    public List<VacationType> VacationTypes { get; set; } = [];
    public List<Overtime> Overtimes { get; set; } = [];
    public List<Sanction> Sanctions { get; set; } = [];


    protected async override Task OnInitializedAsync()
    {
        allState.Action += StateHasChanged;
        await LoadEmployees();
        await LoadDefaults();
        await GetTypesCount();
    }

    private async Task GetTypesCount()
    {
        OvertimeTypes = await overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);
        SanctionTypes = await sanctionTypeService.GetAll(Constants.SanctionTypeBaseUrl);
        VacationTypes = await vacationTypeService.GetAll(Constants.VacationTypeBaseUrl);

        Overtimes = await overtimeService.GetAll(Constants.OvertimeBaseUrl);
        Sanctions = await sanctionService.GetAll(Constants.SanctionBaseUrl);
    }



    // inforumje kiedy formularz został zamkniety
    private async Task NotifyPerentFormCloseClicked()
    {
        ShowMainPage = true;
        ShowAddOrUpdatePage = false;
        await LoadDefaults();
        await LoadEmployees();

    }
    private async Task LoadEmployees()
    {
        Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);
    }

    private async Task LoadDefaults()
    {
        DefaultCountries = await countryService.GetAll(Constants.CountryBaseUrl);
        DefaultCounties = await countyService.GetAll(Constants.CountyBaseUrl);
        DefaultTowns = await townService.GetAll(Constants.TownBaseUrl);
        DefaultGeneralDepartmentents = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
        DefaultDepartmentents = await departmentService.GetAll(Constants.DepartmentBaseUrl);
        DefaultBranches = await branchService.GetAll(Constants.BranchBaseUrl);
    }

    private void HandleCountrySelectionEvent(int countryId) => SelectedCounties = DefaultCounties.Where(c => c.CountryId == countryId).ToList();
    private void HandleCitySelectionEvent(int countyId) => SelectedTowns = DefaultTowns.Where(c => c.CountyId == countyId).ToList();
    private void HandleGeneralDepartmentSelectionEvent(int generalDepartmentId) => SelectedDepartments = DefaultDepartmentents.Where(c => c.GeneralDepartmentId == generalDepartmentId).ToList();
    private void HandleDepartmententSelectionEvent(int departmentId) => SelectedBranches = DefaultBranches.Where(c => c.DepartmentId == departmentId).ToList();

    async Task HandleSaveEmployeeClickedEvent(Employee employee)
    {
        bool successCheck = false;
        if (employee.Id > 0)
        {
            var result = await employeeService.Update(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMassage(result.Flag, result.Massage);
            Title = "Add";
        }
        else
        {
            var response = await employeeService.Insert(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMassage(response.Flag, response.Massage);
            Title = "Add";
        }
        if (successCheck)
        {
            addOrUpdateEmployee!.ClearContent();
            StateHasChanged();
            ReloadPage();
        }

    }



    public bool ShowMainPage { get; set; } = true;
    public bool ShowAddOrUpdatePage { get; set; } = false;
    public void ShowAddOrUpdateEmployeeButtonClicked()
    {
        if (Title.Contains("Update"))
        {
            addOrUpdateEmployee!.Title = "Update";
            Title = "Add";
        }
        else
        {
            Title = "Add";
            addOrUpdateEmployee!.Title = "Add";
        }

        ShowMainPage =false;
        allState.ShowMainPage = false;
        ShowAddOrUpdatePage = true;
    }

    private async void EditClicked(Employee employee)
    {
        Title = "Update";
        Employee = employee;
        addOrUpdateEmployee!.EmployeeGroup1.Name = employee.Name;
        addOrUpdateEmployee.EmployeeGroup1.Address = employee.Address;
        addOrUpdateEmployee.EmployeeGroup1.CivilId = employee.CivilId;
        addOrUpdateEmployee.EmployeeGroup1.TelephoneNumber = employee.TelephoneNumber;
        addOrUpdateEmployee.EmployeeGroup1.FlieNumber = employee.FileNumber;
        addOrUpdateEmployee.EmployeeGroup1.Photo = employee.Photo;

        addOrUpdateEmployee.EmployeeGroup2.JobName = employee.JobName;
        addOrUpdateEmployee.EmployeeGroup2.TownId = employee.TownId;
        addOrUpdateEmployee.EmployeeGroup2.BranchId = employee.BranchId;
        addOrUpdateEmployee.EmployeeGroup2.other = employee.Other;


        await LoadEmployees();
        ShowAddOrUpdateEmployeeButtonClicked();
    }

    private async void DeleteClicked(Employee employee)
    {
        var confirmModal = Modal.Show<ConfirmationDialog>($"Are you sure you wanna delete {employee.Name}?");
        var result = await confirmModal.Result;

        if (result.Cancelled) return;

        var response = await employeeService.DeleteById(employee.Id, Constants.EmployeeBaseUrl);
        if (await DisplayMassage(response.Flag, response.Massage))
        {
            await LoadEmployees();
            StateHasChanged();
            ReloadPage();
        }
    }

    private async void ViewClicked(Employee employee)
    {
        Employee = employee;

        allState.EmployeeDetailsPageClicked();
        ShowMainPage = false;
    }
    public List<Sanction> EmployeeSanctions { get; set; } = new();
    public List<Overtime> EmployeeOvertimes { get; set; } = new();
    public decimal SumOfNumbers { get; set; }
    private async void RaportClicked(Employee employee)
    {
        Employee = employee;
        EmployeeSanctions = Sanctions.Where(e => e.EmployeeId == employee.Id).ToList();
        EmployeeOvertimes = Overtimes.Where(e => e.EmployeeId == employee.Id).ToList();
        foreach (var item in EmployeeOvertimes)
        {
            SumOfNumbers += item.NumberOfHours;
        }
        if (SumOfNumbers != 0)
        {
            SumOfNumbers = SumOfNumbers / 24;
        }
        allState.EmployeeRaportPageClicked();
        ShowMainPage = false;
    }


    private async void AddHealthClicked(Employee employee)
    {



        var parameters = new ModalParameters()
        .Add(nameof(DoctorDialog.i), employee.Id);

        var form = Modal.Show<DoctorDialog>($"Add Employee Health Issue", parameters);
        var result = await form.Result;

        if (result.Confirmed)
        {
            var temp = result.Data.ToString().Split(';');
            // await DisplayMassage(false, $"Data:{temp[0]}, MedicalDiagnose:{temp[1]}, MedicalRecommendation: {temp[2]}");

            Doctor.Date = DateTime.Parse(temp[0]);
            Doctor.MedicalDiagnose = temp[1];
            Doctor.MedicalRecommendation = temp[2];
            Doctor.EmployeeId = int.Parse(temp[3]);
            await SaveHealthEvent(Doctor, Doctor.EmployeeId);
        }

    }
    Overtime Overtime = new();
    private async void AddOvertimeClicked(Employee employee)
    {



        var parameters = new ModalParameters()
        .Add(nameof(OvertimeDialog.i), employee.Id);

        var form = Modal.Show<OvertimeDialog>($"Add Employee Overtime Information", parameters);
        var result = await form.Result;

        if (result.Confirmed)
        {
            var temp = result.Data.ToString().Split(';');
            Overtime.EmployeeId = int.Parse(temp[3]);
            Overtime.StartDate = DateTime.Parse(temp[1]);
            Overtime.NumberOfHours = int.Parse(temp[2]);
            Overtime.OvertimeTypeId = int.Parse(temp[4]);
            await SaveOvertimeEvent(Overtime);
        }

    }
    async Task SaveOvertimeEvent(Overtime item)
    {
        var (flag, massage) = await overtimeService.Insert(item, Constants.OvertimeBaseUrl);
        var response = await DisplayMassage(flag, massage);
        if (response)
        {
            Overtime = new();
            StateHasChanged();
            ReloadPage();
        }
        ReloadPage();
    }

    Sanction Sanction = new();
    private async void AddSanctionClicked(Employee employee)
    {



        var parameters = new ModalParameters()
        .Add(nameof(SanctionDialog.i), employee.Id);

        var form = Modal.Show<SanctionDialog>($"Add Employee Sanction Information", parameters);
        var result = await form.Result;

        if (result.Confirmed)
        {
            var temp = result.Data.ToString().Split(';');
            Sanction.EmployeeId = int.Parse(temp[3]);
            Sanction.Date = DateTime.Parse(temp[1]);
            Sanction.PunishmentDate = DateTime.Parse(temp[2]);
            Sanction.SanctionTypeId = int.Parse(temp[4]);
            Sanction.Punishment = temp[5];
            await SaveSanctionEvent(Sanction);
        }

    }
    async Task SaveSanctionEvent(Sanction item)
    {
        var (flag, massage) = await sanctionService.Insert(item, Constants.SanctionBaseUrl);
        var response = await DisplayMassage(flag, massage);
        if (response)
        {
            Sanction = new();
            ReloadPage();
            StateHasChanged();
        }
        ReloadPage();
    }

    Vacation Vacation = new();
    private async void AddVacationClicked(Employee employee)
    {



        var parameters = new ModalParameters()
        .Add(nameof(VacationDialog.i), employee.Id);

        var form = Modal.Show<VacationDialog>($"Add Employee Vacation Information", parameters);
        var result = await form.Result;

        if (result.Confirmed)
        {
            var temp = result.Data.ToString().Split(';');


            Vacation.StartDate = DateTime.Parse(temp[0]);
            Vacation.EmployeeId = int.Parse(temp[1]);
            Vacation.VacationTypeId = int.Parse(temp[2]);
            Vacation.NumberOfDays = int.Parse(temp[3]);

            await SaveVacationEvent(Vacation);

        }

    }
    async Task SaveVacationEvent(Vacation item)
    {
        var (flag, massage) = await vacationService.Insert(item, Constants.VacationBaseUrl);
        var response = await DisplayMassage(flag, massage);
        if (response)
        {
            Vacation = new();
            ReloadPage();
            StateHasChanged();
        }
        ReloadPage();
    }

    async Task SaveHealthEvent(Doctor item, int employeeId)
    {
        item.EmployeeId = employeeId;
        var (flag, massage) = await doctorService.Insert(item, Constants.DoctorBaseUrl);
        var response = await DisplayMassage(flag, massage);
        if (response)
        {
            Doctor = new();
            ReloadPage();
            StateHasChanged();
        }
        ReloadPage();
    }

    void HandleDetailsPageClosedClicked()
    {
        allState.EmployeeClicked();
        
    }
    void HandleRaportPageClosedClicked()
    {
        allState.EmployeeClicked();
        
    }

    private async Task<bool>
    DisplayMassage(bool flag, string massage)
    {

        if (flag)
        {
            var parameters = new ModalParameters()
            .Add(nameof(DisplayMessage.Message), massage);
            Modal.Show<DisplayMessage>
                ("Succes", parameters);
            return true;
        }
        else
        {
            var parameters = new ModalParameters()
            .Add(nameof(DisplayMessage.Message), massage);
            Modal.Show<DisplayMessage>
                ("Alert", parameters);
            return false;
        }
    }

    private void ReloadPage()
    {
        allState.ResetAll();
        allState.EmployeeClicked();
        NavManager.NavigateTo("/home/dashboard", true);
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}



