@page "/identity/account/register"
@layout AuthenticationLayout
<div class="container">
    <div class="row">
        <div class="col-lg-4"></div>
        <div class="col-lg-4">
            <EditForm Enhance Model="User" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />
                <div class="card bg-dark" style="opacity:0.5; margin-top:50%; border-radius:10px; color:white; font:bold">
                    <div class="card-header">Register an account</div>
                    <div class="container">
                        <div class="row">
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>
                            <div class="col-lg-4 col-md-4 col-sm-4 d-flex justify-content-center">
                                <!-- Miejsce na logo-->

                                @* <img style="border-radius:20px" src="../images/logos/logo.jpg" height="50" width="50" /> *@
                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="form-group mt-3">
                            <label class="form-label">Full Name</label>
                            <InputText @bind-Value="User.FullName" class="form-control"></InputText>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="User.Email" class="form-control"></InputText>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Password</label>
                            <input type="password" @bind="User.Password" class="form-control"></input>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Confirm Password</label>
                            <input type="password" @bind="User.ConfirmPassword" class="form-control"></input>
                        </div>
                        <div class="form-group mt-3">
                            @if (ShowLoadingButton)
                            {
                                <ButtonLoadingSpinner></ButtonLoadingSpinner>
                            }
                            else
                            {
                                <button class="btn btn-outline-primary float-end" type="submit">Register</button>
                            }
                        </div>
                    </div>
                    <div class="card-footer">
                        <span class="text-center">
                            Have account? |
                            <a class="btn-link" href="identity/account/login">Sign In</a>
                        </span>
                        <ValidationSummary />
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>
@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    public bool ShowLoadingButton { get; set; } = false;
    Register User = new();


    async Task HandleRegistration()
    {
        ShowLoadingButton = true;
        var result = await accountService.CreateAsync(User);
        if (result.Flag)
        {

            User = new();   
            
            if (await DisplayMassage(result.Flag, result.Massage))
            {
                NavManager.NavigateTo("/identity/account/login");
            }
               

        }
        else
        {
            await DisplayMassage(result.Flag, result.Massage);
        }
        ShowLoadingButton = false;
    }

    private async Task<bool> DisplayMassage(bool flag, string massage)
    {

        if (flag)
        {
            var parameters = new ModalParameters()
        .Add(nameof(DisplayMessage.Message), massage);
            Modal.Show<DisplayMessage>("Succes", parameters);
            return true;
        }
        else
        {
            var parameters = new ModalParameters()
        .Add(nameof(DisplayMessage.Message), massage);
            Modal.Show<DisplayMessage>("Alert", parameters);
            return false;
        }
    }


}