@page "/"

@code {
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        try{
            var user = (await AuthenticationState).User;
            if (user.Identity!.IsAuthenticated)
                NavManager.NavigateTo("/home/dashboard");
            else
                NavManager.NavigateTo("/identity/account/login");
        }
        catch (Exception ex)
        {
            bool EX = DisplayMassage(false, $"Can not open connection ! Error: {ex.Message}").IsCompletedSuccessfully;
            if (EX)
            {
                await Task.Delay(3000);
                NavManager.NavigateTo("/identity/account/login", forceLoad: true);
            }




        }
    }
    private async Task<bool> DisplayMassage(bool flag, string massage)
    {

        if (flag)
        {
            var parameters = new ModalParameters()
        .Add(nameof(DisplayMessage.Message), massage);
            Modal.Show<DisplayMessage>("Succes", parameters);
            return true;
        }
        else
        {
            var parameters = new ModalParameters()
        .Add(nameof(DisplayMessage.Message), massage);
            Modal.Show<DisplayMessage>("Alert", parameters);
            return false;
        }
    }
}